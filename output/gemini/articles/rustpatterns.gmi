Title : Why I love Rust: Pattern Matching
Author: Yael
Date  : 16 May 2023
Tags  : rust software-design

My journey with Rust has been rocky to say the least, from fandom to hating back to loving it, I never stopped learning about how I program and engineer. I'm a huge nerd of Functional Programming and the thing that absolutely sold me about rust is it's algebraic type system, it is my biggest joy to bring type proofness and complexity to low level programs. The pattern matching in it makes for expressive, readable and type-safe code. In this blog article we will take a look at this topic, and I hope you can learn something from it :3

## Patterns

### Refutable vs irrefutable
Patterns in Rust come in two types; refutable and irrefutable. Patterns that match conditionally are called refutable, while patterns that match any possible value are called irrefutable. Which one you can use will depend on the context. For example, a let-statement will need a irrefutable pattern, because what would happen if a variable in a let-statement doesn’t get a value?

```rust
// Irrefutable patterns - variable bindings, always succeeds
let x = 5;
let (x, y) = (1, 2);

// Doesn't compile
let Ok(x) = string.parse::<i32>() // parsing a string will return a Result<T>, and it is refutable whether it's an OK(x)
```

if let statements on the other hand can have refutable patterns, as the body is evaluated conditionally and it's refutability is inherent:

```rust
if let Ok(x) = string.parse::<i32>() {
  // ... do something if string can be parsed as a 32 bit integer ...
}

// if let can have a refutable pattern, so we can also use a value for x:
if let Ok(64) = someString.parse::<i32>() {
  // ... do something if string can be parsed as a 32 bit integer ...
}
``` 

## Destructuring
Many patterns destructure various types, and they can also be mixed and match together. Let’s look at some of them together~

### Tuples
You are already probably familiar with tuple destructuring, but let's examine again:

```rust
// tuple: (i32, i32, &str)
let tuple = (1, 2, "three");
let (x, y, z_str) = tuple;
```

We see in the last line that tuple is destructured into 3 new variables: x, y, and z_str.
This can be done for all sorts of tuples, as long as the destructured types match.

My favorite trick is that you can match elements with ``..`` or ``_``, which are used to skip elements and create more complex logic:

```rust
// discard z_str
let (x, y, _) = tuple;

// get only x
let (x, ..) = tuple;

let big_tuple = (1, 2, 3, 4, 5);

// Does not compile, ambigious pattern.
let (..., middle, ...) = big_tuple;
```
(Patterns have to be unambiguous)

### Structs
Destructuring structs is similar to tuples, we get the fields by their name instead of position. but we need to be mindful of the position of the .. when using it to match the rest of the fields.

```rust
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x, y } = p;
    assert_eq!(0, x);
    assert_eq!(7, y);
}
```

### Enums
This might be the simplest yet most important of them all, the simplest case for enum deconstructing is to match one with no data:

```rust
// simple enum
enum TrafficSignal {
    Red,
    Orange,
    Green
}

// match if our color is green
if let Color::green = my_color {
    // cars go!
}
```

Luckily, Rust enums are way way more interesting as they contain data. So much complexity arises out of that.

```rust
// complex enum
enum Enemy {
    Alive(u32),
    Dead
}

// match against an alive enemy
if let Enemy::Alive(data) = my_enemy {
    // oh no! gotta beat them >:3
}

// match against a dead enemy
if let Enemy::Dead = my_enemy {
    // you win~!
}
```

## Other Patterns
There are other types of patterns in Rust that capture a lot of elementary and cool behavior. Since they're varied it is best to just demonstrate them:

```rust
// OR pattern

1 | 2 | 3 // matches 1, 2, or 3
"one" | "two" // matches one of these two strings

// range pattern

1..=10 // matches 1 to 10 (inclusive)
1..10 // matches 1 to 10 (non-inclusive)

// at pattern
struct Point {
    x: i32,
    y: i32
}

// matches if my_x exists under an optional condition
if let Point {x: my_x @ 1..=10, ..} = my_data {
    // my_x is between 1 and 10.
}
```

## match
The match keyword in Rust is a versatile construct that enables exhaustive pattern matching and is often used to handle complex scenarios where multiple patterns need to be evaluated. It is especially valuable when dealing with enums and other algebraic data types that have several variants just as we shown earlier.

Consider an example where we have an enum representing different types of messages that can be sent in a messaging application:

```rust

enum Message {
    Text(String),
    Image(Vec<u8>),
    Audio(Vec<u8>),
    Video(Vec<u8>),
}
```
With match, we can easily handle each variant of the Message enum and perform specific actions based on the message type in a declarative and guaranteed manner:

```rust

fn process_message(msg: Message) {
    match msg {
        Message::Text(text) => println!("Received text message: {}", text),
        Message::Image(data) => println!("Received image with size: {} bytes", data.len()),
        Message::Audio(data) => println!("Received audio with size: {} bytes", data.len()),
        Message::Video(data) => println!("Received video with size: {} bytes", data.len()),
    }
}
```

## Error Handling and Result Enum

Rust's Result enum is widely used for error handling. It has two variants, Ok and Err, where Ok contains the successful result, and Err contains an error. Pattern matching provides an elegant way to handle both cases effectively.

```rust

fn divide(a: i32, b: i32) -> Result<i32, String> {
    if b == 0 {
        return Err("Division by zero!".to_string());
    }
    Ok(a / b)
}

fn main() {
    let result = divide(10, 2);
    match result {
        Ok(value) => println!("Result: {}", value),
        Err(error) => println!("Error: {}", error),
    }
}
```

## Matching with Conditions (Pattern Guards)

Pattern guards can be used in conjunction with match to introduce additional conditions for pattern matching. This is particularly useful when we need to apply further filtering or evaluation on the matched values.

```rust
enum TransactionCategory {
    Income,
    Expense,
    Unknown,
}

fn categorize_transaction(amount: f64) -> TransactionCategory {
    match amount {
        a if a > 0.0 => TransactionCategory::Income,
        a if a < 0.0 => TransactionCategory::Expense,
        _ => TransactionCategory::Unknown,
    }
}

```
In this example, the pattern guards (if n % 2 == 0 and if n % 2 != 0) introduce conditions to check whether the number is even or odd, respectively. The match statement then handles each case accordingly.
Exhaustive Pattern Matching

One of the strengths of match is its ability to enforce exhaustive pattern matching, ensuring that all possible cases are handled explicitly. This makes it easier to catch potential bugs or missing cases during compilation rather than runtime. This helps us not guarantee but *prove* that our applications are consistent and complete. 

```rust

enum Direction {
    Up,
    Down,
    Left,
    Right,
}

fn move_player(direction: Direction) {
    match direction {
        Direction::Up => println!("Moving player upwards."),
        Direction::Down => println!("Moving player downwards."),
        Direction::Left => println!("Moving player to the left."),
        Direction::Right => println!("Moving player to the right."),
    }
}
```

In this example, if we were to add a new variant to the Direction enum without updating the match statement, the Rust compiler would raise a warning indicating that not all cases have been handled. This helps to catch potential oversights during development.

The match case is a powerful tool that allows us the developers to handle and tame our codebases better. By leveraging the exhaustive nature of match, we're can create more robust and reliable code, catching errors early in the development process and producing safer software.


## The Payoff
pattern matching is closely related to Rust's powerful algebric type system. We can combine the different behaviours of patterns in order to write clear and simply awesome code~!<br>
One example that speaks to itself and shows the immense power pattern matching has is to pit it against object-oriented code. let's consider a case where we have a Shape hierarchy with two concrete classes (Circle and Rectangle), we'll compare the object-oriented approach in java with the pattern matching code in Rust.

### Java (OOP):
```java
abstract class Shape {
    abstract double calculateArea();
}

class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}

class Rectangle extends Shape {
    private double width;
    private double height;

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    public double calculateArea() {
        return width * height;
    }
}

public class Main {
    public static void main(String[] args) {
        Shape shape = new Circle(5.0);

        if (shape instanceof Circle) {
            Circle circle = (Circle) shape;
            double area = circle.calculateArea();
            System.out.println("Area of Circle: " + area);
        } else if (shape instanceof Rectangle) {
            Rectangle rectangle = (Rectangle) shape;
            double area = rectangle.calculateArea();
            System.out.println("Area of Rectangle: " + area);
        }
    }
}
```
### Rust (Pattern Matching / FP):
```rust
enum Shape {
    Circle(f64),
    Rectangle(f64, f64),
}

fn calculate_area(shape: Shape) -> f64 {
    match shape {
        Shape::Circle(radius) => std::f64::consts::PI * radius * radius,
        Shape::Rectangle(width, height) => width * height,
    }
}

fn main() {
    let circle = Shape::Circle(5.0);
    let circleArea = calculate_area(circle);
    let rectangle = Shape::Rectangle(5.0, 2.0);
    let rectangleArea = calculate_area(rectangle);
    
    println!("Area of Circle: {circleArea}", circleArea);
    println!("Area of Rectangle: {rectangleArea}", rectangleArea);
}
```

### Conclusions
In the realm of Functional Programming, pattern matching plays a fundamental role as a powerful tool for data manipulation and transformation. It aligns well with the principles of immutability and functional purity, making it an indispensable feature in languages that embrace functional paradigms, such as Rust (<3).

In Rust we can leverage it to perform elegant and concise data deconstruction and extraction. By pattern matching on algebraic data types like enums and tuples, we can handle different cases of data structures and perform operations accordingly. This leads to code that is more declarative, expressive, and easier to reason about.

Functional programming heavily emphasizes the use of recursion, and pattern matching fits naturally into this paradigm. When working with recursive data structures like lists or trees, pattern matching enables concise handling of base cases and recursive calls. This not only improves code readability but also contributes to the safety of the program, as the Rust compiler can enforce exhaustive pattern matching, ensuring that all cases are handled explicitly.

Additionally, pattern matching in Rust allows for the deconstruction of complex data structures into their constituent parts. This enables to access specific elements of data easily, facilitating the creation of higher-order functions and objects that operate on specific patterns of data.

Overall, pattern matching in Rust aligns beautifully with the principles of Functional Programming, empowering developers to write code that is more concise, expressive, and robust. By embracing pattern matching in a all developing contexts, we are able to can unleash the full potential of the language's type system, leading to more maintainable and scalable codebases.

I could go on about it for much longer, although I hope that was enough for the knowledge-hungry. See you next time ˚ʚ♡ɞ˚